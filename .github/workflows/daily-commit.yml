name: Daily Commit

on:
  schedule:
    # 1 PM PST = 21:00 UTC
    - cron: '0 21 * * *'
  workflow_dispatch: # Allows manual triggering

jobs:
  commit:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Configure Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
          git config --global pull.rebase true
          git config --global push.default current
          git config --global core.autocrlf input
          
      - name: Create commit
        id: commit
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # Get the current date in ISO format
          DATE=$(date -u +"%Y-%m-%d")
          
          # Create commit message with date and changes summary
          CHANGES=$(git diff --staged --name-status | awk '{print $2}' | tr '\n' ', ')
          git commit -m "Daily automated commit [$DATE] [skip ci]

          Changes:
          $CHANGES"
          
      - name: Push changes
        if: steps.commit.outcome == 'success'
        run: |
          # Function to handle git operations with retries
          git_operation() {
            local max_retries=3
            local retry_count=0
            local wait_time=10
            
            while [ $retry_count -lt $max_retries ]; do
              if "$@"; then
                return 0
              else
                retry_count=$((retry_count + 1))
                if [ $retry_count -eq $max_retries ]; then
                  echo "Operation failed after $max_retries attempts"
                  return 1
                fi
                echo "Operation failed, retrying in ${wait_time} seconds... (Attempt $retry_count of $max_retries)"
                sleep $wait_time
                wait_time=$((wait_time * 2))  # Exponential backoff
              fi
            done
          }
          
          # Fetch latest changes
          echo "Fetching latest changes..."
          git_operation git fetch origin
          
          # Check for conflicts
          if git merge-base --is-ancestor HEAD origin/${{ github.ref_name }}; then
            echo "No conflicts detected, proceeding with push"
          else
            echo "Potential conflicts detected, attempting to resolve..."
            git_operation git pull --rebase origin ${{ github.ref_name }}
          fi
          
          # Push changes with retry logic
          echo "Pushing changes..."
          if git_operation git push origin HEAD:${{ github.ref }}; then
            echo "Successfully pushed changes"
            exit 0
          else
            echo "Failed to push changes after all retries"
            exit 1
          fi 